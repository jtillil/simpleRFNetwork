% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simpleRFNetwork.R
\name{simpleRFNetwork}
\alias{simpleRFNetwork}
\title{simpleRFNetwork}
\usage{
simpleRFNetwork(
  formula,
  data,
  num_trees = 50,
  mtry = NULL,
  min_node_size = NULL,
  replace = TRUE,
  probability = FALSE,
  splitrule = NULL,
  unordered_factors = "ignore",
  num_threads = 1,
  varclusters = NULL,
  splitobject = NULL,
  splitmethod = NULL,
  varselection = NULL,
  seed = 1L
)
}
\arguments{
\item{formula}{Object of class \code{formula} or \code{character} describing the model to fit.}

\item{data}{Training data of class \code{data.frame}.}

\item{num_trees}{Number of trees.}

\item{mtry}{Number of variables to possibly split at in each node. One of "root", "half", "full".}

\item{min_node_size}{Minimal node size. Default 1 for classification, 5 for regression, 3 for survival and 10 for probability estimation.}

\item{replace}{Sample with replacement. Default TRUE.}

\item{probability}{Grow a probability forest. Default FALSE.}

\item{splitrule}{Splitrule to use in trees. Default "Gini" for classification and probability forests, "Variance" for regression forests and "Logrank" for survival forests.}

\item{unordered_factors}{How to handle unordered factor variables. One of "ignore", "order_once", "order_split" and "partition" with default "ignore".}

\item{num_threads}{Number of threads used for mclapply. Default is 1.}

\item{varclusters}{List of numeric vectors that contain the IDs of genes in the respective modules.}

\item{splitobject}{Object for node splitting. Use "single_variable" for standard procedure and "module" for use of modules as vector-valued predictor variables in splitting.}

\item{splitmethod}{Method for node splitting if splitobject is "module". One of "univarate", "univariate_fast", "CART", "CART_fast", "LDA", "SVM", "Nelder", "SANN".}

\item{varselection}{Variable selection in case multiple variables are used for node splitting. Default "none" uses all variables of a module.}
}
\description{
Implements Random Forests (Breiman 2001) with emphasis on simplicity. 
Uses reference classes and only plain \code{R}. 
Not optimized for computation speed. 
Allows rapid prototyping of RF-type algorithms.
}
\examples{
\donttest{
library(simpleRFNetwork) 
library(SeqNet)

# Generate Network Data

testdat <- genGeneNetworkData(
  num_networks = 1,
  num_genes = 500,
  num_modules = NULL,
  max_genes_per_module = 100,
  sd_genes_per_module = 25,
  num_observations = 1500,
  num_causal_modules = 1,
  prop_causal_genes = 0.5,
  total_effect_size = 10,
  effect_intercept = -1,
  causal_genes_randomly_distributed = FALSE,
  num_threads = 12,
  seed = 1
)

# Create Random Forest

rf <- simpleRFNetwork(pheno ~ .,
                      data=testdat[[1]]$data[1001:1500,],
                      num_trees=50,
                      num_threads=1,
                      splitobject="module",
                      splitmethod="LDA",
# alternative splitmethods: univariate_fast, CART_fast, LDA, SVM, Nelder, SANN
                      varselection="none",
                      mtry="root",
                      varclusters=testdat[[1]]$modules)

# Forest Diagnostics

rf$forest_time

rf$trees[[1]]$varclusters
rf$trees[[1]]$split_clusterIDs

rf$trees[[1]]$split_coefficients
rf$trees[[1]]$split_values

rf$trees[[1]]$linearcomb_times
rf$trees[[1]]$node_times
rf$trees[[1]]$sizes
rf$trees[[1]]$depths

# Permutation Importance and OOB Prediction Error

rf$variableImportance(num_threads = 1)
rf$predictionErrorForestAndTrees()

# Generalization Error

sum(rf$predict(testdat[[1]]$data[1:1000,-1]) != testdat[[1]]$data[1:1000,1]) / 1000
}

}
\references{
Breiman, L. (2001). Random forests. Mach Learn, 45(1), 5-32. \cr
}
\author{
Marvin N. Wright, Johannes Tillil
}
